#!/bin/bash

if [ -n "${PROXY_HOST}" ]; then
    CURL_OPTIONS="-sL -x ${PROXY_HOST}"
    PIP_OPTIONS="--proxy=${PROXY_HOST}"
    echo " Updating the program using a proxy"
else
    CURL_OPTIONS="-sL"
    echo " Not using a proxy updater"
fi

if [ "${MOVIEPILOT_AUTO_UPDATE_DEV}" = "true" ]; then
    echo "Dev  Update mode"
    curl ${CURL_OPTIONS} "https://github.com/AlexanderHel/MoviePilotEngrisk/archive/refs/heads/main.zip" | busybox unzip -d /tmp -
    if [ $? -eq 0 ]; then
        mv /tmp/MoviePilot-main /tmp/app
        echo " Backend program downloaded successfully"
        #  Reinstalling dependencies
        pip install ${PIP_OPTIONS} --upgrade pip
        pip install ${PIP_OPTIONS} -r /tmp/app/requirements.txt
        if [ $? -eq 0 ]; then
            echo " Dependencies installed successfully"
            #  Check for the latest version of the front-end
            frontend_version=$(curl ${CURL_OPTIONS} "https://api.github.com/repos/AlexanderHel/MoviePilot-Frontend-Engrisk/releases/latest" | jq -r .tag_name)
            if [[ "${frontend_version}" == *v* ]]; then
                echo " Downloading the front-end program ${frontend_version}..."
                curl ${CURL_OPTIONS} "https://github.com/AlexanderHel/MoviePilot-Frontend-Engrisk/releases/download/${frontend_version}/dist.zip" | busybox unzip -d /tmp -
                if [ $? -eq 0 ]; then
                    echo " Front-end program downloaded successfully"
                    rm -rf /app
                    mv /tmp/app /app
                    rm -rf /public
                    mv /tmp/dist /public
                    echo " Program update successful， Front-end version：${frontend_version}"
                else
                    echo " Failed to download front-end program， Continue to use the old program to start..."
                fi
            else
                echo " Failed to get the latest version number of the front-end， Continue to activate..."
            fi
        else
            echo " Failed to install dependency， Please pull the mirror again"
        fi
    else
        echo " Failed to download back-end program， Continue to use the old program to start..."
    fi
else
    old_version=$(cat /app/version.py)
    if [[ "${old_version}" == *APP_VERSION* ]]; then
        current_version=v$(echo ${old_version} | sed -ne "s/APP_VERSION\s=\s'v\(.*\)'/\1/gp")
        echo " Current version number：${current_version}"
        #  Check the latest version of the backend
        new_version=$(curl ${CURL_OPTIONS} "https://api.github.com/repos/AlexanderHel/MoviePilotEngrisk/releases/latest" | jq -r .tag_name)
        if [[ "${new_version}" == *v* ]]; then
            release_version=${new_version}
            echo " Latest version number：${release_version}"
            if [ "${current_version}" != "${release_version}" ]; then
                echo " Discover the new version， Starting automatic upgrades..."
                echo " Downloading the back-end program ${release_version}..."
                curl ${CURL_OPTIONS} "https://github.com/AlexanderHel/MoviePilotEngrisk/archive/refs/tags/${release_version}.zip" | busybox unzip -d /tmp -
                if [ $? -eq 0 ]; then
                    echo " Backend program downloaded successfully"
                    #  Reinstalling dependencies
                    pip install ${PIP_OPTIONS} --upgrade pip
                    pip install ${PIP_OPTIONS} -r /tmp/MoviePilot*/requirements.txt
                    if [ $? -eq 0 ]; then
                        echo " Dependencies installed successfully"
                        #  Check for the latest version of the front-end
                        frontend_version=$(curl ${CURL_OPTIONS} "https://api.github.com/repos/AlexanderHel/MoviePilot-Frontend-Engrisk/releases/latest" | jq -r .tag_name)
                        if [[ "${frontend_version}" == *v* ]]; then
                            echo " Downloading the front-end program ${frontend_version}..."
                            curl ${CURL_OPTIONS} "https://github.com/AlexanderHel/MoviePilot-Frontend-Engrisk/releases/download/${frontend_version}/dist.zip" | busybox unzip -d /tmp -
                            if [ $? -eq 0 ]; then
                                echo " Front-end program downloaded successfully"
                                rm -rf /app
                                mv /tmp/MoviePilot* /app
                                rm -rf /public
                                mv /tmp/dist /public
                                echo " Program update successful， Front-end version：${frontend_version}， Back-end version：${release_version}"
                            else
                                echo " Failed to download front-end program， Continue to use the old program to start..."
                            fi
                        else
                            echo " Failed to get the latest version number of the front-end， Continue to activate..."
                        fi
                    else
                        echo " Failed to install dependency， Please pull the mirror again"
                    fi
                else
                    echo " Failed to download back-end program， Continue to use the old program to start..."
                fi
            else
                echo " No new versions found， Skip the update step..."
            fi
        else
            echo " Failed to get latest version number， Continue to activate..."
        fi
    else
        echo " Failed to get current version number， Continue to activate..."
    fi
fi